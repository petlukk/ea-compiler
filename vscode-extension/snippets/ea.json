{
    "Function Declaration": {
        "prefix": "func",
        "body": [
            "func ${1:function_name}(${2:parameters}) -> ${3:return_type} {",
            "    ${4:// function body}",
            "    return ${5:value};",
            "}"
        ],
        "description": "Create a new function"
    },
    "Main Function": {
        "prefix": "main",
        "body": [
            "func main() -> () {",
            "    ${1:// main function body}",
            "    return;",
            "}"
        ],
        "description": "Create a main function"
    },
    "Variable Declaration": {
        "prefix": "let",
        "body": [
            "let ${1:variable_name}: ${2:type} = ${3:value};"
        ],
        "description": "Declare a variable"
    },
    "Mutable Variable": {
        "prefix": "mut",
        "body": [
            "let mut ${1:variable_name}: ${2:type} = ${3:value};"
        ],
        "description": "Declare a mutable variable"
    },
    "If Statement": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) {",
            "    ${2:// if body}",
            "}"
        ],
        "description": "Create an if statement"
    },
    "If-Else Statement": {
        "prefix": "ifelse",
        "body": [
            "if (${1:condition}) {",
            "    ${2:// if body}",
            "} else {",
            "    ${3:// else body}",
            "}"
        ],
        "description": "Create an if-else statement"
    },
    "While Loop": {
        "prefix": "while",
        "body": [
            "while (${1:condition}) {",
            "    ${2:// loop body}",
            "}"
        ],
        "description": "Create a while loop"
    },
    "For Loop": {
        "prefix": "for",
        "body": [
            "for (let ${1:i}: i32 = ${2:0}; ${1:i} < ${3:limit}; ${1:i} += 1) {",
            "    ${4:// loop body}",
            "}"
        ],
        "description": "Create a for loop"
    },
    "Struct Declaration": {
        "prefix": "struct",
        "body": [
            "struct ${1:StructName} {",
            "    ${2:field_name}: ${3:field_type},",
            "}"
        ],
        "description": "Create a struct"
    },
    "Enum Declaration": {
        "prefix": "enum",
        "body": [
            "enum ${1:EnumName} {",
            "    ${2:Variant1},",
            "    ${3:Variant2}(${4:type}),",
            "}"
        ],
        "description": "Create an enum"
    },
    "Print Line": {
        "prefix": "println",
        "body": [
            "println(\"${1:message}\");"
        ],
        "description": "Print a line to stdout"
    },
    "Print": {
        "prefix": "print",
        "body": [
            "print(\"${1:message}\");"
        ],
        "description": "Print to stdout"
    },
    "SIMD f32x4 Vector": {
        "prefix": "f32x4",
        "body": [
            "let ${1:vector_name}: f32x4 = [${2:1.0}, ${3:2.0}, ${4:3.0}, ${5:4.0}]f32x4;"
        ],
        "description": "Create a 4-element f32 SIMD vector"
    },
    "SIMD i32x4 Vector": {
        "prefix": "i32x4",
        "body": [
            "let ${1:vector_name}: i32x4 = [${2:1}, ${3:2}, ${4:3}, ${5:4}]i32x4;"
        ],
        "description": "Create a 4-element i32 SIMD vector"
    },
    "SIMD Vector Addition": {
        "prefix": "vadd",
        "body": [
            "let ${1:result} = ${2:vector1} .+ ${3:vector2};"
        ],
        "description": "SIMD vector addition"
    },
    "SIMD Vector Multiplication": {
        "prefix": "vmul",
        "body": [
            "let ${1:result} = ${2:vector1} .* ${3:vector2};"
        ],
        "description": "SIMD vector multiplication"
    },
    "SIMD Dot Product": {
        "prefix": "vdot",
        "body": [
            "let ${1:dot_result} = horizontal_sum(${2:vector1} .* ${3:vector2});"
        ],
        "description": "SIMD dot product using horizontal sum"
    },
    "Match Expression": {
        "prefix": "match",
        "body": [
            "match ${1:expression} {",
            "    ${2:pattern1} => ${3:result1},",
            "    ${4:pattern2} => ${5:result2},",
            "    _ => ${6:default_result},",
            "}"
        ],
        "description": "Create a match expression"
    },
    "Performance Critical Function": {
        "prefix": "perfunc",
        "body": [
            "@optimize(simd: auto, inline: always)",
            "func ${1:function_name}(${2:parameters}) -> ${3:return_type} {",
            "    ${4:// performance-critical code}",
            "    return ${5:value};",
            "}"
        ],
        "description": "Create a performance-optimized function"
    },
    "SIMD Processing Loop": {
        "prefix": "simdloop",
        "body": [
            "// Process ${1:array_name} in SIMD chunks",
            "let chunk_size = 4; // f32x4 processes 4 elements at once",
            "for (let i: usize = 0; i < ${1:array_name}.length(); i += chunk_size) {",
            "    let chunk = load_vector(&${1:array_name}[i]);",
            "    let processed = ${2:process_chunk}(chunk);",
            "    store_vector(&mut ${3:result_array}[i], processed);",
            "}"
        ],
        "description": "Create a SIMD processing loop pattern"
    }
}