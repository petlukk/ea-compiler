// Vector addition example in EÃ¤
// This program demonstrates memory regions and parallel execution

// Define a memory region for our data
mem_region data {
    // Input vectors
    let a: [f64; 1000];
    let b: [f64; 1000];
    
    // Output vector
    let mut c: [f64; 1000];
    
    // Initialize input vectors
    fn init() {
        parallel for i in 0..1000 {
            a[i] = i as f64 * 0.5;
            b[i] = i as f64 * 1.5;
        }
    }
    
    // Vector addition
    fn add_vectors() {
        parallel for i in 0..1000 {
            c[i] = a[i] + b[i];
        }
    }
    
    // Main function
    pub fn main() -> f64 {
        init();
        add_vectors();
        
        // Compute sum of result vector
        let mut sum = 0.0;
        vectorize for &x in &c {
            sum += x;
        }
        
        sum
    }
}

// Entry point
fn main() -> f64 {
    // Execute the memory region code
    data::main()
}
