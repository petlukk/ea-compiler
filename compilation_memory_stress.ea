// Compilation memory stress test
// This program creates complex compilation scenarios to stress memory allocation
func compilation_stress() -> i32 {
    // Complex nested control flow
    for (let i = 0; i < 5; i += 1) {
        for (let j = 0; j < 5; j += 1) {
            if (i % 2 == 0) {
                while (j < 3) {
                    let temp = i + j;
                    j += 1;
                }
            } else {
                let k = 0;
                while (k < j) {
                    k += 1;
                }
            }
        }
    }
    
    // Multiple function calls
    let result = helper1() + helper2() + helper3();
    
    return result;
}

func helper1() -> i32 {
    let data = Vec::new();
    for (let i = 0; i < 20; i += 1) {
        data.push(i * 3);
    }
    return data.len();
}

func helper2() -> i32 {
    let map = HashMap::new();
    for (let i = 0; i < 15; i += 1) {
        map.insert(i, i * i);
    }
    return map.len();
}

func helper3() -> i32 {
    // Test string concatenation and memory management
    let str1 = String::from("Test");
    let str2 = String::from("String");
    let combined = str1.clone();
    
    return combined.len() + str2.len();
}

func main() -> i32 {
    // Run multiple compilation stress cycles
    let total = 0;
    for (let cycle = 0; cycle < 3; cycle += 1) {
        total += compilation_stress();
    }
    return total;
}