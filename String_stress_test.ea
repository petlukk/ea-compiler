fn main() {
    println("Starting String stress test");
    
    // Test large string creation and manipulation
    let mut large_string = String::new();
    
    // Build a large string by concatenating
    let mut i = 0;
    while i < 1000 {
        large_string.push_str("Hello World ");
        i = i + 1;
    }
    
    let final_len = large_string.len();
    println("Large string length: " + string_from_int(final_len));
    
    // Test multiple string operations
    let mut strings = Vec::new();
    let mut j = 0;
    while j < 500 {
        let s = String::from("Test String ") + string_from_int(j);
        strings.push(s);
        j = j + 1;
    }
    
    println("Created 500 strings");
    
    // Test string search operations
    let search_string = String::from("Test String 250");
    let mut found = false;
    let mut k = 0;
    while k < strings.len() {
        let current = strings.get(k);
        if current == search_string {
            found = true;
            break;
        }
        k = k + 1;
    }
    
    if found {
        println("String search successful");
    }
    
    // Test string modification operations
    let mut m = 0;
    while m < 100 {
        let mut s = String::from("Original");
        s.push_str(" Modified");
        s = s.replace("Original", "Updated");
        s = s.to_uppercase();
        m = m + 1;
    }
    
    println("String modifications completed");
    
    // Test memory intensive operations
    let mut concatenated = String::new();
    let mut n = 0;
    while n < 200 {
        let temp = String::from("Part ") + string_from_int(n);
        concatenated = concatenated + temp;
        if n % 50 == 0 {
            concatenated = concatenated.trim();
        }
        n = n + 1;
    }
    
    println("Memory intensive operations completed");
    
    println("STRING STRESS TEST PASSED");
}

fn string_from_int(n: i32) -> String {
    if n == 0 {
        return String::from("0");
    }
    
    let mut result = String::new();
    let mut num = n;
    let mut negative = false;
    
    if num < 0 {
        negative = true;
        num = -num;
    }
    
    while num > 0 {
        let digit = num % 10;
        let digit_char = match digit {
            0 => "0",
            1 => "1",
            2 => "2",
            3 => "3",
            4 => "4",
            5 => "5",
            6 => "6",
            7 => "7",
            8 => "8",
            9 => "9",
            _ => "0"
        };
        result = String::from(digit_char) + result;
        num = num / 10;
    }
    
    if negative {
        result = String::from("-") + result;
    }
    
    return result;
}