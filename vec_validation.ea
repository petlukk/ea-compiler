// Vec validation test program
// This program MUST work completely after Vec implementation

fn main() {
    // Test 1: Basic Vec creation and operations
    print("Test 1: Basic Vec operations");
    let mut vec = Vec::new();
    
    // Test empty vector
    if vec.len() != 0 {
        print("FAILURE: Empty vec should have length 0");
        return;
    }
    
    if !vec.is_empty() {
        print("FAILURE: Empty vec should be empty");
        return;
    }
    
    // Test push operations
    vec.push(42);
    vec.push(100);
    vec.push(255);
    
    if vec.len() != 3 {
        print("FAILURE: Vec should have length 3 after 3 pushes");
        return;
    }
    
    if vec.is_empty() {
        print("FAILURE: Vec should not be empty after pushes");
        return;
    }
    
    // Test get operations
    let val0 = vec.get(0);
    let val1 = vec.get(1);
    let val2 = vec.get(2);
    let val3 = vec.get(3);
    
    if val0 != 42 {
        print("FAILURE: vec.get(0) should return 42");
        return;
    }
    
    if val1 != 100 {
        print("FAILURE: vec.get(1) should return 100");
        return;
    }
    
    if val2 != 255 {
        print("FAILURE: vec.get(2) should return 255");
        return;
    }
    
    if val3 != null {
        print("FAILURE: vec.get(3) should return null");
        return;
    }
    
    print("✓ Test 1 passed");
    
    // Test 2: Pop operations
    print("Test 2: Pop operations");
    let popped = vec.pop();
    if popped != 255 {
        print("FAILURE: pop() should return 255");
        return;
    }
    
    if vec.len() != 2 {
        print("FAILURE: Vec should have length 2 after pop");
        return;
    }
    
    print("✓ Test 2 passed");
    
    // Test 3: Capacity management
    print("Test 3: Capacity management");
    let mut big_vec = Vec::with_capacity(100);
    
    if big_vec.capacity() < 100 {
        print("FAILURE: Vec with_capacity(100) should have capacity >= 100");
        return;
    }
    
    // Fill beyond initial capacity to test growth
    for i in 0..150 {
        big_vec.push(i);
    }
    
    if big_vec.len() != 150 {
        print("FAILURE: Vec should have length 150 after 150 pushes");
        return;
    }
    
    if big_vec.capacity() < 150 {
        print("FAILURE: Vec should have grown capacity to at least 150");
        return;
    }
    
    print("✓ Test 3 passed");
    
    // Test 4: Clear operations
    print("Test 4: Clear operations");
    big_vec.clear();
    
    if big_vec.len() != 0 {
        print("FAILURE: Vec should have length 0 after clear");
        return;
    }
    
    if !big_vec.is_empty() {
        print("FAILURE: Vec should be empty after clear");
        return;
    }
    
    print("✓ Test 4 passed");
    
    // Test 5: SIMD operations for f32 vectors
    print("Test 5: SIMD operations");
    let mut vec1 = Vec::new();
    let mut vec2 = Vec::new();
    
    // Add test data
    for i in 0..16 {
        vec1.push(i as f32);
        vec2.push((i * 2) as f32);
    }
    
    // Test SIMD addition
    let result = vec1.simd_add(&vec2);
    if result.len() != 16 {
        print("FAILURE: SIMD add result should have length 16");
        return;
    }
    
    for i in 0..16 {
        let expected = (i + i * 2) as f32;
        if result.get(i) != expected {
            print("FAILURE: SIMD add result incorrect");
            return;
        }
    }
    
    // Test SIMD sum
    let sum = vec1.simd_sum();
    let expected_sum = 120.0; // Sum of 0..16
    if sum != expected_sum {
        print("FAILURE: SIMD sum incorrect");
        return;
    }
    
    // Test SIMD dot product
    let dot = vec1.simd_dot(&vec2);
    let expected_dot = 1240.0; // Sum of i * (i * 2) for i = 0..16
    if dot != expected_dot {
        print("FAILURE: SIMD dot product incorrect");
        return;
    }
    
    print("✓ Test 5 passed");
    
    // Test 6: Memory management stress test
    print("Test 6: Memory stress test");
    let mut stress_vec = Vec::new();
    
    // Add many elements
    for i in 0..1000 {
        stress_vec.push(i);
    }
    
    // Verify all elements
    for i in 0..1000 {
        if stress_vec.get(i) != i {
            print("FAILURE: Stress test element mismatch");
            return;
        }
    }
    
    // Pop all elements
    for i in 0..1000 {
        let expected = 999 - i;
        if stress_vec.pop() != expected {
            print("FAILURE: Stress test pop mismatch");
            return;
        }
    }
    
    if !stress_vec.is_empty() {
        print("FAILURE: Stress test vec should be empty after all pops");
        return;
    }
    
    print("✓ Test 6 passed");
    
    print("Vec created");
    print("Vec tested");
    print("ALL TESTS PASSED");
}