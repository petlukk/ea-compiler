// Vec stress test program
// Tests Vec performance and stability under load

fn main() {
    print("Starting Vec stress test...");
    
    // Test 1: Large capacity allocation
    print("Test 1: Large capacity allocation");
    let mut large_vec = Vec::with_capacity(10000);
    
    if large_vec.capacity() < 10000 {
        print("FAILURE: Large capacity allocation failed");
        return;
    }
    
    // Fill the vector
    for i in 0..10000 {
        large_vec.push(i);
    }
    
    if large_vec.len() != 10000 {
        print("FAILURE: Large vector should have 10000 elements");
        return;
    }
    
    // Verify all elements are correct
    for i in 0..10000 {
        if large_vec.get(i) != i {
            print("FAILURE: Large vector element mismatch");
            return;
        }
    }
    
    print("✓ Test 1 passed");
    
    // Test 2: Repeated growth
    print("Test 2: Repeated growth");
    let mut growth_vec = Vec::new();
    
    // Add elements in batches to force multiple reallocations
    for batch in 0..100 {
        for i in 0..100 {
            growth_vec.push(batch * 100 + i);
        }
    }
    
    if growth_vec.len() != 10000 {
        print("FAILURE: Growth vector should have 10000 elements");
        return;
    }
    
    // Verify all elements
    for i in 0..10000 {
        if growth_vec.get(i) != i {
            print("FAILURE: Growth vector element mismatch");
            return;
        }
    }
    
    print("✓ Test 2 passed");
    
    // Test 3: Mixed operations
    print("Test 3: Mixed operations");
    let mut mixed_vec = Vec::new();
    
    // Add elements
    for i in 0..1000 {
        mixed_vec.push(i);
    }
    
    // Remove some elements
    for _ in 0..500 {
        mixed_vec.pop();
    }
    
    if mixed_vec.len() != 500 {
        print("FAILURE: Mixed ops vector should have 500 elements");
        return;
    }
    
    // Add more elements
    for i in 500..1000 {
        mixed_vec.push(i);
    }
    
    if mixed_vec.len() != 1000 {
        print("FAILURE: Mixed ops vector should have 1000 elements after re-add");
        return;
    }
    
    // Clear and re-add
    mixed_vec.clear();
    
    for i in 0..2000 {
        mixed_vec.push(i);
    }
    
    if mixed_vec.len() != 2000 {
        print("FAILURE: Mixed ops vector should have 2000 elements after clear/re-add");
        return;
    }
    
    print("✓ Test 3 passed");
    
    // Test 4: SIMD stress test
    print("Test 4: SIMD stress test");
    let mut simd_vec1 = Vec::new();
    let mut simd_vec2 = Vec::new();
    
    // Create large vectors for SIMD operations
    for i in 0..1024 {
        simd_vec1.push(i as f32);
        simd_vec2.push((i * 2) as f32);
    }
    
    // Perform multiple SIMD operations
    let add_result = simd_vec1.simd_add(&simd_vec2);
    if add_result.len() != 1024 {
        print("FAILURE: SIMD add stress test failed");
        return;
    }
    
    let sum = simd_vec1.simd_sum();
    let expected_sum = 523776.0; // Sum of 0..1024
    if sum != expected_sum {
        print("FAILURE: SIMD sum stress test failed");
        return;
    }
    
    let dot = simd_vec1.simd_dot(&simd_vec2);
    // Sum of i * (i * 2) for i = 0..1024
    let expected_dot = 715716608.0;
    if dot != expected_dot {
        print("FAILURE: SIMD dot stress test failed");
        return;
    }
    
    print("✓ Test 4 passed");
    
    // Test 5: Memory fragmentation test
    print("Test 5: Memory fragmentation test");
    let mut frag_vecs = Vec::new();
    
    // Create many small vectors
    for i in 0..100 {
        let mut small_vec = Vec::new();
        for j in 0..10 {
            small_vec.push(i * 10 + j);
        }
        frag_vecs.push(small_vec);
    }
    
    // Verify all vectors
    for i in 0..100 {
        let vec = frag_vecs.get(i);
        if vec.len() != 10 {
            print("FAILURE: Fragmentation test vector should have 10 elements");
            return;
        }
        for j in 0..10 {
            if vec.get(j) != i * 10 + j {
                print("FAILURE: Fragmentation test element mismatch");
                return;
            }
        }
    }
    
    print("✓ Test 5 passed");
    
    print("Vec stress test completed successfully");
    print("All stress tests passed");
}