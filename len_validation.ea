// Vec len() validation test program
// This program MUST work completely after len() implementation

func main() {
    // Test Vec len operation specifically
    print("Starting len test");
    
    let mut vec = Vec::new();
    print("Vec created");
    
    // Test initial length (should be 0)
    let initial_len = vec.len();
    if (initial_len == 0) {
        print("Initial length correct");
    }
    
    // Add one element and test length
    vec.push(10);
    let len_after_one = vec.len();
    if (len_after_one == 1) {
        print("Length after one push correct");
    }
    
    // Add more elements and test length
    vec.push(20);
    vec.push(30);
    let len_after_three = vec.len();
    if (len_after_three == 3) {
        print("Length after three pushes correct");
    }
    
    // Test with multiple independent vectors
    let mut vec2 = Vec::new();
    vec2.push(100);
    vec2.push(200);
    vec2.push(300);
    vec2.push(400);
    vec2.push(500);
    
    let vec2_len = vec2.len();
    if (vec2_len == 5) {
        print("Second vector length correct");
    }
    
    // Verify first vector still has correct length
    let vec1_len = vec.len();
    if (vec1_len == 3) {
        print("First vector length unchanged");
    }
    
    // Test with empty vector again
    let empty_vec = Vec::new();
    let empty_len = empty_vec.len();
    if (empty_len == 0) {
        print("Empty vector length correct");
    }
    
    // Test with larger vector
    let mut large_vec = Vec::new();
    large_vec.push(1);
    large_vec.push(2);
    large_vec.push(3);
    large_vec.push(4);
    large_vec.push(5);
    large_vec.push(6);
    large_vec.push(7);
    large_vec.push(8);
    large_vec.push(9);
    large_vec.push(10);
    
    let large_len = large_vec.len();
    if (large_len == 10) {
        print("Large vector length correct");
    }
    
    print("ALL TESTS PASSED");
}