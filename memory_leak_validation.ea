// Memory leak validation test program
// This program exercises all major memory allocation paths in the compiler
func memory_stress_test() -> i32 {
    // Test 1: Multiple function declarations (parser allocations)
    let counter = 0;
    
    // Test 2: Large array allocations
    let large_array: [i32; 1000] = [0; 1000];
    for (let i = 0; i < 1000; i += 1) {
        large_array[i] = i * 2;
    }
    
    // Test 3: Vec operations (stdlib memory management)
    let vec = Vec::new();
    for (let j = 0; j < 100; j += 1) {
        vec.push(j);
    }
    
    // Test 4: HashMap operations
    let map = HashMap::new();
    for (let k = 0; k < 50; k += 1) {
        map.insert(k, k * k);
    }
    
    // Test 5: String operations
    let str = String::new();
    str = String::from("Memory leak test string for validation");
    
    // Test 6: SIMD vector operations (if supported)
    let vec1: f32x4 = [1.0, 2.0, 3.0, 4.0];
    let vec2: f32x4 = [5.0, 6.0, 7.0, 8.0];
    let result = vec1 .* vec2;
    
    counter += vec.len();
    counter += map.len();
    counter += str.len();
    counter += large_array[999];
    
    return counter;
}

func recursive_memory_test(depth: i32) -> i32 {
    if (depth <= 0) {
        return 0;
    }
    
    // Allocate memory at each recursion level
    let local_vec = Vec::new();
    local_vec.push(depth);
    
    return depth + recursive_memory_test(depth - 1);
}

func main() -> i32 {
    let result1 = memory_stress_test();
    let result2 = recursive_memory_test(10);
    
    return result1 + result2;
}