// SIMD Memory Load/Store Operations Demo
// Demonstrates the new load_vector and store_vector operations

func simd_array_processing() {
    // Create arrays for SIMD processing  
    let input_data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0];
    let output_data = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    
    // Get pointers to array data
    let input_ptr = &input_data[0];
    let output_ptr = &output_data[0];
    
    // Load first vector (elements 0-3)
    let vec1 = load_vector(input_ptr, f32x4);
    
    // Load second vector (elements 4-7) with explicit alignment
    let vec2 = load_vector(input_ptr + 16, f32x4, 16);
    
    // Process the vectors (multiply by 2 and add 1)
    let scale = [2.0, 2.0, 2.0, 2.0]f32x4;
    let offset = [1.0, 1.0, 1.0, 1.0]f32x4;
    
    let result1 = (vec1 .* scale) .+ offset;
    let result2 = (vec2 .* scale) .+ offset;
    
    // Store results back to memory
    store_vector(output_ptr, result1);
    store_vector(output_ptr + 16, result2, 16);
    
    print("SIMD array processing completed!");
}

func simd_matrix_multiplication() {
    // Demonstrate memory-intensive SIMD operations
    let matrix_a = [
        1.0, 2.0, 3.0, 4.0,
        5.0, 6.0, 7.0, 8.0, 
        9.0, 10.0, 11.0, 12.0,
        13.0, 14.0, 15.0, 16.0
    ];
    
    let matrix_b = [
        1.0, 0.0, 0.0, 0.0,
        0.0, 1.0, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0, 
        0.0, 0.0, 0.0, 1.0
    ];
    
    let result = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    
    let a_ptr = &matrix_a[0];
    let b_ptr = &matrix_b[0];
    let result_ptr = &result[0];
    
    // Process 4x4 matrix using SIMD vectors
    let i = 0;
    while i < 4 {
        // Load row from matrix A
        let row_a = load_vector(a_ptr + (i * 16), f32x4);
        
        // Load column vectors from matrix B (simplified)
        let col_b = load_vector(b_ptr + (i * 16), f32x4);
        
        // Compute dot product
        let product = dot_product(row_a, col_b);
        
        // Store result
        let result_vec = [product, product, product, product]f32x4;
        store_vector(result_ptr + (i * 16), result_vec);
        
        i = i + 1;
    }
    
    print("SIMD matrix multiplication completed!");
}

func simd_image_processing() {
    // Simulate image processing with SIMD load/store
    let pixels = [
        255, 128, 64, 255,  // RGBA pixel 1
        200, 100, 50, 255,  // RGBA pixel 2
        150, 75, 25, 255,   // RGBA pixel 3
        100, 50, 12, 255,   // RGBA pixel 4
        80, 40, 10, 255,    // RGBA pixel 5
        60, 30, 8, 255,     // RGBA pixel 6
        40, 20, 5, 255,     // RGBA pixel 7
        20, 10, 2, 255      // RGBA pixel 8
    ];
    
    let filtered = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    
    let input_ptr = &pixels[0];
    let output_ptr = &filtered[0];
    
    // Process 16 bytes (4 pixels) at a time
    let chunk1 = load_vector(input_ptr, u8x16);
    let chunk2 = load_vector(input_ptr + 16, u8x16);
    
    // Apply brightness filter (add 20 to each channel)
    let brightness = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]u8x16;
    let bright1 = chunk1 .+ brightness;
    let bright2 = chunk2 .+ brightness;
    
    // Store filtered results
    store_vector(output_ptr, bright1);
    store_vector(output_ptr + 16, bright2);
    
    print("SIMD image processing completed!");
}

func main() {
    print("=== SIMD Memory Operations Demo ===");
    
    simd_array_processing();
    simd_matrix_multiplication();
    simd_image_processing();
    
    print("All SIMD memory demos completed successfully!");
}