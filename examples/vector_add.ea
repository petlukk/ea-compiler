// Vector addition example in EÃ¤
// This program demonstrates basic vector operations using current syntax

func init_vectors() -> (Vec<i32>, Vec<i32>) {
    // Create input vectors
    let a = Vec::new();
    let b = Vec::new();
    
    // Initialize vectors with sample data
    let i = 0;
    while (i < 10) {
        a.push(i * 5);        // a[i] = i * 5
        b.push(i * 15);       // b[i] = i * 15
        i = i + 1;
    }
    
    return (a, b);
}

func add_vectors(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
    let c = Vec::new();
    
    // Vector addition using current syntax
    let i = 0;
    let len = a.len();
    while (i < len) {
        let sum = a.get(i) + b.get(i);
        c.push(sum);
        i = i + 1;
    }
    
    return c;
}

func compute_sum(vec: Vec<i32>) -> i32 {
    let sum = 0;
    let i = 0;
    let len = vec.len();
    
    while (i < len) {
        sum = sum + vec.get(i);
        i = i + 1;
    }
    
    return sum;
}

func main() -> i32 {
    println("Vector addition example with current syntax");
    
    // Initialize vectors
    let (a, b) = init_vectors();
    
    // Perform vector addition
    let c = add_vectors(a, b);
    
    // Compute sum of result vector
    let result = compute_sum(c);
    
    println("Vector addition result sum: " + i32_to_string(result));
    
    return result;
}
