// examples/simd_example.ea
// Example SIMD program demonstrating EÃ¤'s SIMD capabilities using current syntax

// Basic SIMD operations using supported syntax
func vector_dot_product() -> i32 {
    // Test SIMD vector operations with current syntax
    let vec_a = [1.0, 2.0, 3.0, 4.0]f32x4;
    let vec_b = [5.0, 6.0, 7.0, 8.0]f32x4;
    
    // SIMD multiply-add operations
    let product = vec_a .* vec_b;  // SIMD multiplication
    let sum = product .+ vec_a;    // SIMD addition
    
    return 0;
}

// Integer SIMD operations
func simd_integer_ops() -> i32 {
    // Integer SIMD vectors
    let int_vec1 = [10, 20, 30, 40]i32x4;
    let int_vec2 = [5, 15, 25, 35]i32x4;
    
    // Element-wise operations
    let result = int_vec1 .+ int_vec2;  // Addition
    let mask = int_vec1 .& [0xFF, 0xFF, 0xFF, 0xFF]i32x4;  // Bitwise AND
    
    return 42;
}

// Demonstrate various SIMD vector types
func simd_types_demo() -> i32 {
    // Different SIMD vector types
    let float_vec = [1.5, 2.5, 3.5, 4.5]f32x4;
    let wide_int = [100, 200, 300, 400]i32x4;
    
    // Basic operations
    let scaled = float_vec .* [2.0, 2.0, 2.0, 2.0]f32x4;
    let shifted = wide_int .+ [1, 1, 1, 1]i32x4;
    
    return 123;
}

// Main function demonstrating SIMD features
func main() -> i32 {
    println("SIMD Example: Demonstrating vector operations");
    
    // Test different SIMD operations
    let result1 = vector_dot_product();
    println("Vector dot product result: " + i32_to_string(result1));
    
    let result2 = simd_integer_ops();
    println("Integer SIMD operations result: " + i32_to_string(result2));
    
    let result3 = simd_types_demo();
    println("SIMD types demo result: " + i32_to_string(result3));
    
    println("SIMD example completed successfully!");
    
    return 0;
}